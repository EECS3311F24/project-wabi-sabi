swagger: "2.0"
info:
  title: "API Documentation"
  description: "Wabisabi APIs"
  version: "1.0.0"
basePath: "/"
schemes:
  - "http"
paths:
  /tasks/add:
    post:
      summary: "Add task object"
      description: "Adds a new task object to the task collection, as well as adds it to the user who requested"
      Authorization: Bearer <token>
      parameters:
        - in: "body"
          name: "body"
          description: "Task data"
          required: true
          schema:
            type: "object"
            properties:
              text:
                type: "string"
      responses:
        201:
          description: "Task created successfully"
        400:
          description: "Task not created successfully (includes error message)"
        401:
          description: "Invalid jwt session token"
  /tasks/get:
    get:
      summary: "Get list of a users tasks"
      Authorization: Bearer <token>
      description: "Adds a new task object to the task collection, as well as adds it t"
      parameters:
        - in: "body"
          name: "body"
          description: "Task data"
          required: true
          schema:
            type: "object"
            properties:
              text:
                type: "string"
      responses:
        201:
          description: "Task created successfully"
          schema:
            type: array
            properties:
            id:
              type: "ObjectId"
            is_sub_task:
              type: "boolean"
            text:
              type: "string"
            due_date:
              type: "Date"
            tag:
              type: "Tag"
            status:
              type: "String"

        400:
          description: "Error with getting Tasks"
        401:
          description: "Invalid jwt session token"
  /signup:
    post:
      summary: "User sign-up"
      description: "Register a new user account."
      parameters:
        - in: "body"
          name: "body"
          description: "User sign-up data"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        201:
          description: "User registered successfully"
        400:
          description: "Email is already registered"

  /login:
    post:
      summary: "User login"
      description: "Log in a user and return a JWT token."
      parameters:
        - in: "body"
          name: "body"
          description: "User login data"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Successful login, JWT token returned"
        401:
          description: "Invalid email or password"
